# Generated by Django 3.1.4 on 2021-09-14 13:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('audits', '0005_auto_20210914_0815'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommercialIndustryPageOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.CharField(blank=True, max_length=100, null=True)),
                ('site_full_address', models.CharField(blank=True, max_length=120, null=True)),
                ('gps_coordinate', models.CharField(blank=True, max_length=30, null=True, verbose_name='GPS Coordinates')),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('date', models.DateTimeField()),
                ('connects_to_grid', models.BooleanField(blank=True, null=True)),
                ('tariff', models.DecimalField(blank=True, decimal_places=2, help_text='kWh', max_digits=3, null=True)),
                ('grid_quality', models.CharField(blank=True, max_length=80, null=True)),
                ('grid_availability', models.IntegerField(blank=True, help_text='State in percentage on the average.', null=True)),
                ('transformers_detail', models.CharField(blank=True, help_text='in kVA', max_length=200, null=True)),
                ('generators_detail', models.CharField(blank=True, help_text='in kVA', max_length=200, null=True)),
                ('switching_mode', models.CharField(blank=True, max_length=30, null=True)),
                ('minimum_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('average_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('maximum_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('daily_consumption', models.IntegerField(blank=True, help_text='kWh', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommercialIndustryPageTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roof_space_available', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('roof_type', models.CharField(blank=True, help_text='Flat, Mono-Pitch, Double-Pitch, Specify if others', max_length=200, null=True)),
                ('roof_material', models.CharField(blank=True, help_text='Concrete slab, Aluminum, Ardex, Specify if others', max_length=30, null=True)),
                ('roofing_sheet_thickness', models.IntegerField(help_text='if Aluminum', null=True)),
                ('roofing_sheet_lapping', models.CharField(blank=True, max_length=40, null=True)),
                ('roofing_truss_material', models.CharField(blank=True, max_length=40, null=True)),
                ('roof_picture', models.ImageField(default='default6.jpg', upload_to='r_pics')),
                ('ground_space_picture', models.ImageField(default='default7.jpg', upload_to='gs_pics')),
                ('ground_space_available', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('equipment_room_availability', models.BooleanField()),
                ('size_of_equipment_room', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('ER_picture_or_space_to_build', models.ImageField(default='default8.jpg', upload_to='er_pics')),
                ('panel_room_picture', models.ImageField(default='default9.jpg', upload_to='pr_pics')),
                ('roof_to_ER_distance', models.IntegerField(blank=True, help_text='meters', null=True)),
                ('ER_to_power_room_distance', models.IntegerField(blank=True, help_text='meters', null=True)),
                ('pv_genset', models.BooleanField(blank=True, null=True, verbose_name='PV-GENSET SOLUTION + GRID')),
                ('grid_tied', models.BooleanField(blank=True, null=True, verbose_name='GRID-TIED SOLUTION')),
                ('BESS', models.BooleanField(blank=True, null=True, verbose_name='BESS SOLUTION')),
                ('opening_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('closing_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('starsight_rep', models.CharField(blank=True, max_length=50, null=True, verbose_name='Starsight Representative')),
                ('station_rep', models.CharField(blank=True, max_length=30, null=True, verbose_name='Station Representative')),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('comment', models.TextField(blank=True, null=True, verbose_name='General Comments')),
            ],
        ),
        migrations.CreateModel(
            name='FillingStationPageOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.CharField(blank=True, max_length=100, null=True)),
                ('site_full_address', models.CharField(blank=True, max_length=120, null=True)),
                ('gps_coordinate', models.CharField(blank=True, max_length=30, null=True, verbose_name='GPS Coordinates')),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('date', models.DateTimeField()),
                ('PMS_pump', models.IntegerField(blank=True, null=True)),
                ('AGO_pump', models.IntegerField(blank=True, null=True)),
                ('DPK_pump', models.IntegerField(blank=True, null=True)),
                ('surface_transfer_pump', models.IntegerField(blank=True, help_text='1.5HP', null=True)),
                ('water_pump', models.IntegerField(blank=True, null=True)),
                ('location', models.TextField(help_text='Please enter the number of ACs by location, stating the codition as: working or not working.', null=True, verbose_name='ACs by Location')),
                ('split_1', models.IntegerField(null=True, verbose_name='Number of 1HP')),
                ('split_2', models.IntegerField(null=True, verbose_name='Number of 1.5HP')),
                ('split_3', models.IntegerField(null=True, verbose_name='Number of 2HP')),
                ('split_4', models.IntegerField(null=True, verbose_name='Number of 2.5HP')),
                ('standing_unit_1', models.IntegerField(null=True, verbose_name='Number of 3HP')),
                ('standing_unit_2', models.IntegerField(null=True, verbose_name='Number of 5HP')),
                ('standing_unit_3', models.IntegerField(null=True, verbose_name='Number of 10HP')),
                ('lighting_details', models.CharField(blank=True, help_text='Please state the type and wattage rating of all bulbs.', max_length=200, null=True)),
                ('canopy_light', models.IntegerField(blank=True, null=True)),
                ('perimeter_light', models.IntegerField(blank=True, null=True)),
                ('offices', models.IntegerField(blank=True, null=True)),
                ('rest_rooms', models.IntegerField(blank=True, null=True)),
                ('others_1', models.IntegerField(blank=True, null=True)),
                ('others_2', models.IntegerField(blank=True, null=True)),
                ('generator_1', models.IntegerField(blank=True, null=True)),
                ('generator_2', models.IntegerField(blank=True, null=True)),
                ('connects_to_grid', models.BooleanField(null=True)),
                ('transformer_size', models.IntegerField(blank=True, help_text='in kVA', null=True)),
                ('fridge', models.IntegerField(blank=True, null=True)),
                ('freezer', models.IntegerField(blank=True, null=True)),
                ('fan', models.IntegerField(blank=True, null=True)),
                ('printer', models.IntegerField(blank=True, null=True)),
                ('scanner', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FillingStationPageTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_counting_machine', models.IntegerField(blank=True, null=True)),
                ('others_equipment_1', models.IntegerField(blank=True, null=True)),
                ('others_equipment_2', models.IntegerField(blank=True, null=True)),
                ('others_equipment_3', models.IntegerField(blank=True, null=True)),
                ('others_equipment_4', models.IntegerField(blank=True, null=True)),
                ('three_phase_equipment', models.BooleanField(help_text='State the size of te three pahse equipment (in HP) below')),
                ('size', models.IntegerField(blank=True, null=True)),
                ('roof_type', models.CharField(blank=True, help_text='Flat, Mono-Pitch, Double-Pitch, Specify if others', max_length=200, null=True)),
                ('roof_material', models.CharField(blank=True, help_text='Concrete slab, Aluminum, Ardex, Specify if others', max_length=30, null=True)),
                ('roofing_sheet_thickness', models.IntegerField(help_text='if Aluminum', null=True)),
                ('roofing_sheet_lapping', models.CharField(blank=True, max_length=40, null=True)),
                ('roofing_truss_material', models.CharField(blank=True, max_length=40, null=True)),
                ('ER_picture_or_space_to_build', models.ImageField(default='default5.jpg', upload_to='er_pics')),
                ('bungalow', models.BooleanField(default=False, help_text='State the building type and other information as below.')),
                ('one_storey', models.BooleanField(default=False)),
                ('two_storey', models.BooleanField(default=False)),
                ('three_storey', models.BooleanField(default=False)),
                ('multi_resident', models.BooleanField(default=False)),
                ('multi_commercial', models.BooleanField(default=False)),
                ('mall', models.BooleanField(default=False)),
                ('building_picture', models.ImageField(default='default1.jpg', upload_to='building_pics')),
                ('roof_picture', models.ImageField(default='default2.jpg', upload_to='roof_pics')),
                ('changeover_box_picture', models.ImageField(default='default3.jpg', upload_to='changeover_pics')),
                ('Distribution_board_picture', models.ImageField(default='default4.jpg', upload_to='db_pics')),
                ('opening_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('closing_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('starsight_rep', models.CharField(blank=True, max_length=50, null=True, verbose_name='Starsight Representative')),
                ('starsight_contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('station_rep', models.CharField(blank=True, max_length=30, null=True, verbose_name='Station Representative')),
                ('client_contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('comment', models.TextField(blank=True, null=True, verbose_name='General Comments')),
            ],
        ),
        migrations.RenameField(
            model_name='pageone',
            old_name='split_5',
            new_name='standing_unit_1',
        ),
        migrations.RenameField(
            model_name='pageone',
            old_name='split_6',
            new_name='standing_unit_2',
        ),
        migrations.RenameField(
            model_name='pageone',
            old_name='split_7',
            new_name='standing_unit_3',
        ),
        migrations.AlterField(
            model_name='pageone',
            name='location',
            field=models.TextField(help_text='Please enter the number of ACs per location.', null=True, verbose_name='ACs by Location'),
        ),
        migrations.AlterField(
            model_name='pagesix',
            name='not_needed',
            field=models.BooleanField(default=False, help_text='Roof Remedial work?'),
        ),
        migrations.CreateModel(
            name='ChecklistTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_one', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.fillingstationpageone', verbose_name='Pumps | Cooling and Lighting Information')),
                ('page_two', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.fillingstationpagetwo', verbose_name='Appliances | Roof Detail and Operation Hour Information')),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistThree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_one', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.commercialindustrypageone', verbose_name='Client Detail | Existing Power and Load Information')),
                ('page_two', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.commercialindustrypagetwo', verbose_name='Mounting Planes | Equipment Room | Solution Type')),
            ],
        ),
    ]
