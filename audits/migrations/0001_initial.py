# Generated by Django 3.1.4 on 2021-09-22 10:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('SMEs', 'Banking & SMEs'), ('C&I', 'Commercial & Industries')], max_length=200, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('rep_name', models.CharField(max_length=200, null=True)),
                ('designation', models.CharField(max_length=200, null=True)),
                ('phone', models.CharField(max_length=26, null=True)),
                ('email', models.EmailField(max_length=100, null=True)),
                ('num_of_site', models.IntegerField(blank=True, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('date_created',),
            },
        ),
        migrations.CreateModel(
            name='CommercialIndustryPageTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roof_space_available', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('roof_type', models.CharField(blank=True, help_text='Flat, Mono-Pitch, Double-Pitch, Specify if others', max_length=200, null=True)),
                ('roof_material', models.CharField(blank=True, help_text='Concrete slab, Aluminum, Ardex, Specify if others', max_length=30, null=True)),
                ('roofing_sheet_thickness', models.IntegerField(help_text='if Aluminum', null=True)),
                ('roofing_sheet_lapping', models.CharField(blank=True, max_length=40, null=True)),
                ('roofing_truss_material', models.CharField(blank=True, max_length=40, null=True)),
                ('roof_picture', models.ImageField(default='default6.jpg', upload_to='r_pics')),
                ('ground_space_picture', models.ImageField(default='default7.jpg', upload_to='gs_pics')),
                ('ground_space_available', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('equipment_room_availability', models.BooleanField()),
                ('size_of_equipment_room', models.IntegerField(blank=True, help_text='square meters', null=True)),
                ('ER_picture_or_space_to_build', models.ImageField(default='default8.jpg', upload_to='er_pics')),
                ('panel_room_picture', models.ImageField(default='default9.jpg', upload_to='pr_pics')),
                ('roof_to_ER_distance', models.IntegerField(blank=True, help_text='meters', null=True)),
                ('ER_to_power_room_distance', models.IntegerField(blank=True, help_text='meters', null=True)),
                ('pv_genset', models.BooleanField(blank=True, null=True, verbose_name='PV-GENSET SOLUTION + GRID')),
                ('grid_tied', models.BooleanField(blank=True, null=True, verbose_name='GRID-TIED SOLUTION')),
                ('BESS', models.BooleanField(blank=True, null=True, verbose_name='BESS SOLUTION')),
                ('opening_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('closing_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('starsight_rep', models.CharField(blank=True, max_length=50, null=True, verbose_name='Starsight Representative')),
                ('station_rep', models.CharField(blank=True, max_length=30, null=True, verbose_name='Station Representative')),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('comment', models.TextField(blank=True, null=True, verbose_name='General Comments')),
            ],
        ),
        migrations.CreateModel(
            name='FillingStationPageTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_counting_machine', models.IntegerField(blank=True, null=True)),
                ('others_equipment_1', models.IntegerField(blank=True, null=True)),
                ('others_equipment_2', models.IntegerField(blank=True, null=True)),
                ('others_equipment_3', models.IntegerField(blank=True, null=True)),
                ('others_equipment_4', models.IntegerField(blank=True, null=True)),
                ('three_phase_equipment', models.BooleanField(help_text='State the size of te three pahse equipment (in HP) below')),
                ('size', models.IntegerField(blank=True, null=True)),
                ('roof_type', models.CharField(blank=True, help_text='Flat, Mono-Pitch, Double-Pitch, Specify if others', max_length=200, null=True)),
                ('roof_material', models.CharField(blank=True, help_text='Concrete slab, Aluminum, Ardex, Specify if others', max_length=30, null=True)),
                ('roofing_sheet_thickness', models.IntegerField(help_text='if Aluminum', null=True)),
                ('roofing_sheet_lapping', models.CharField(blank=True, max_length=40, null=True)),
                ('roofing_truss_material', models.CharField(blank=True, max_length=40, null=True)),
                ('ER_picture_or_space_to_build', models.ImageField(default='default5.jpg', upload_to='er_pics')),
                ('bungalow', models.BooleanField(default=False, help_text='State the building type and other information as below.')),
                ('one_storey', models.BooleanField(default=False)),
                ('two_storey', models.BooleanField(default=False)),
                ('three_storey', models.BooleanField(default=False)),
                ('multi_resident', models.BooleanField(default=False)),
                ('multi_commercial', models.BooleanField(default=False)),
                ('mall', models.BooleanField(default=False)),
                ('building_picture', models.ImageField(default='default1.jpg', upload_to='building_pics')),
                ('roof_picture', models.ImageField(default='default2.jpg', upload_to='roof_pics')),
                ('changeover_box_picture', models.ImageField(default='default3.jpg', upload_to='changeover_pics')),
                ('Distribution_board_picture', models.ImageField(default='default4.jpg', upload_to='db_pics')),
                ('opening_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('closing_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('starsight_rep', models.CharField(blank=True, max_length=50, null=True, verbose_name='Starsight Representative')),
                ('starsight_contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('station_rep', models.CharField(blank=True, max_length=30, null=True, verbose_name='Station Representative')),
                ('client_contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('comment', models.TextField(blank=True, null=True, verbose_name='General Comments')),
            ],
        ),
        migrations.CreateModel(
            name='PageFive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('one', models.BooleanField(default=False, null=True, verbose_name='Will ladder or scaffolds be required for access to the roof?')),
                ('two', models.BooleanField(default=False, null=True, verbose_name='Will fall protection be required while working on the roof?')),
                ('three', models.BooleanField(default=False, null=True, verbose_name='Is there enough access and egress at proposed equipment room?')),
                ('four', models.BooleanField(default=False, null=True, verbose_name='Does the proposed equipment room has an existing smoke/fire alarm?')),
                ('five', models.BooleanField(default=False, null=True, verbose_name='Is there enough access and egress at the generator area. If we are dealing with a confined space please state?')),
                ('six', models.BooleanField(default=False, null=True, verbose_name='Are there existing bund walls/secondary spill contigency arrangement around the diesel storage tank?')),
                ('seven', models.BooleanField(default=False, null=True, verbose_name='Are there visible signs of oil spillage around the generator area/plinth? Please take date-staped pictures')),
                ('eight', models.BooleanField(default=False, null=True, verbose_name='Are there any overhead power cables that will be a problem for work at height?')),
                ('nine', models.BooleanField(default=False, null=True, verbose_name='Are there any environmental or safety concerns?')),
            ],
        ),
        migrations.CreateModel(
            name='PageFour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opening_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('closing_time', models.TimeField(blank=True, help_text='State in 24-hours format', null=True)),
                ('monday_to_friday', models.BooleanField(default=False)),
                ('monday_to_saturday', models.BooleanField(default=False)),
                ('monday_to_sunday', models.BooleanField(default=False)),
                ('available', models.BooleanField(default=False, help_text='Only tick if equipment room is available.')),
                ('not_available', models.BooleanField(default=False, help_text='Only tick if equipment room is NOT available.')),
                ('on_what_floor', models.CharField(blank=True, max_length=20, null=True)),
                ('dimension', models.CharField(blank=True, max_length=30, null=True)),
                ('distance_to_generator', models.CharField(blank=True, max_length=10, null=True)),
                ('ER_picture_or_space_to_build', models.ImageField(default='default5.jpg', upload_to='er_pics')),
                ('bungalow', models.BooleanField(default=False, help_text='State the building type and other information as below.')),
                ('one_storey', models.BooleanField(default=False)),
                ('two_storey', models.BooleanField(default=False)),
                ('three_storey', models.BooleanField(default=False)),
                ('multi_resident', models.BooleanField(default=False)),
                ('multi_commercial', models.BooleanField(default=False)),
                ('mall', models.BooleanField(default=False)),
                ('building_picture', models.ImageField(default='default1.jpg', upload_to='building_pics')),
                ('roof_picture', models.ImageField(default='default2.jpg', upload_to='roof_pics')),
                ('changeover_box_picture', models.ImageField(default='default3.jpg', upload_to='changeover_pics')),
                ('Distribution_board_picture', models.ImageField(default='default4.jpg', upload_to='db_pics')),
            ],
        ),
        migrations.CreateModel(
            name='PageSeven',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('position', models.CharField(blank=True, max_length=30, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PageSix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roof_dimension', models.CharField(blank=True, max_length=20, null=True)),
                ('total_area', models.IntegerField()),
                ('number_of_panels', models.IntegerField()),
                ('roof_type', models.CharField(blank=True, max_length=50, null=True)),
                ('roofing_sheet_material', models.CharField(blank=True, max_length=20, null=True)),
                ('roofing_sheet_thickness', models.CharField(blank=True, max_length=20, null=True)),
                ('roofing_sheet_lapping', models.CharField(blank=True, max_length=20, null=True)),
                ('roofing_truss', models.CharField(blank=True, max_length=20, null=True)),
                ('not_needed', models.BooleanField(default=False, help_text='Roof Remedial work?')),
                ('minor_repair', models.BooleanField(default=False)),
                ('major_repair', models.BooleanField(default=False)),
                ('complete_replacement', models.BooleanField(default=False)),
                ('general_comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PageThree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connects_to_grid', models.BooleanField(null=True)),
                ('connects_to_solar', models.BooleanField(null=True)),
                ('details', models.CharField(help_text='Enter the number and size of the solar panels.', max_length=200)),
                ('connects_to_generator', models.BooleanField(null=True)),
                ('size_of_transformer', models.IntegerField(help_text='in kVA', null=True)),
                ('genset_1', models.CharField(blank=True, max_length=60, null=True)),
                ('genset_2', models.CharField(blank=True, max_length=60, null=True)),
                ('genset_3', models.CharField(blank=True, max_length=60, null=True)),
                ('transformer', models.CharField(blank=True, max_length=60, null=True)),
                ('item1', models.CharField(blank=True, help_text='State the equipment/appliance name and the rating in kW or kVA in each case. ', max_length=100, null=True)),
                ('item2', models.CharField(blank=True, max_length=100, null=True)),
                ('item3', models.CharField(blank=True, max_length=100, null=True)),
                ('item4', models.CharField(blank=True, max_length=100, null=True)),
                ('item5', models.CharField(blank=True, max_length=100, null=True)),
                ('item6', models.CharField(blank=True, max_length=100, null=True)),
                ('item7', models.CharField(blank=True, max_length=100, null=True)),
                ('inverter_1', models.CharField(blank=True, max_length=100, null=True)),
                ('inverter_2', models.CharField(blank=True, max_length=100, null=True)),
                ('inverter_3', models.CharField(blank=True, max_length=100, null=True)),
                ('ups_1', models.CharField(blank=True, max_length=100, null=True)),
                ('ups_2', models.CharField(blank=True, max_length=100, null=True)),
                ('ups_3', models.CharField(blank=True, max_length=100, null=True)),
                ('stabilizer_1', models.CharField(blank=True, max_length=100, null=True)),
                ('stabilizer_2', models.CharField(blank=True, max_length=100, null=True)),
                ('battery_bank_1', models.CharField(blank=True, help_text='e.g 24 units of 12V 200AH', max_length=100, null=True)),
                ('battery_bank_2', models.CharField(blank=True, max_length=100, null=True)),
                ('battery_bank_3', models.CharField(blank=True, max_length=100, null=True)),
                ('battery_bank_4', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PageTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desktop', models.IntegerField(blank=True, null=True)),
                ('laptop', models.IntegerField(blank=True, null=True)),
                ('printer', models.IntegerField(blank=True, null=True)),
                ('counting_machine', models.IntegerField(blank=True, null=True)),
                ('scanner', models.IntegerField(blank=True, null=True)),
                ('atms', models.IntegerField(blank=True, null=True)),
                ('tv', models.IntegerField(blank=True, null=True)),
                ('water_dispenser', models.IntegerField(blank=True, null=True)),
                ('exchange_rate_board', models.IntegerField(blank=True, null=True)),
                ('signage_light', models.IntegerField(blank=True, null=True)),
                ('water_pump', models.IntegerField(blank=True, null=True)),
                ('fan', models.IntegerField(blank=True, null=True)),
                ('microwave', models.IntegerField(blank=True, null=True)),
                ('card_printer', models.IntegerField(blank=True, null=True)),
                ('time_stamping_machine', models.IntegerField(blank=True, null=True)),
                ('shredder', models.IntegerField(blank=True, null=True)),
                ('sorting_machine', models.IntegerField(blank=True, null=True)),
                ('fridge', models.IntegerField(blank=True, null=True)),
                ('mantrap_door', models.IntegerField(blank=True, null=True)),
                ('hand_dryer', models.IntegerField(blank=True, null=True)),
                ('others', models.TextField(blank=True, help_text='Please enter the name and counts of other appliances if exist.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateTimeField()),
                ('status', models.CharField(choices=[('Scheduled for Audit', 'Scheduled for Audit'), ('Scheduled for Data-logging', 'Scheduled for Data-logging'), ('Scheduled for Audit & Data-logging', 'Scheduled for Audit & Data-logging'), ('Pending Schedule', 'Pending Schedule'), ('Audited', 'Audited'), ('Data-logged', 'Data-logged'), ('Audited & Data-logged', 'Audited & Data-logged')], max_length=100, null=True)),
                ('report_received', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('date_assigned',),
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True)),
                ('address', models.TextField(max_length=200, null=True)),
                ('state', models.CharField(max_length=20, null=True)),
                ('region', models.CharField(max_length=4, null=True)),
                ('contact', models.CharField(max_length=100, null=True)),
                ('designation', models.CharField(max_length=100, null=True)),
                ('email', models.EmailField(max_length=100, null=True)),
                ('phone', models.CharField(max_length=26, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.client')),
            ],
            options={
                'ordering': ('date_added',),
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('representative', models.CharField(max_length=100, null=True)),
                ('designation', models.CharField(max_length=100, null=True)),
                ('contact', models.CharField(max_length=26, null=True)),
                ('email', models.EmailField(max_length=100, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('sites', models.ManyToManyField(blank=True, through='audits.Schedule', to='audits.Site')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date_created',),
            },
        ),
        migrations.AddField(
            model_name='schedule',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.site'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='vendor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.vendor'),
        ),
        migrations.CreateModel(
            name='PageOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_full_address', models.CharField(blank=True, max_length=120, null=True)),
                ('gps_coordinate', models.CharField(blank=True, max_length=30, null=True)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('date', models.DateTimeField()),
                ('location', models.TextField(help_text='Please enter the number of ACs per location.', null=True, verbose_name='ACs by Location')),
                ('split_1', models.IntegerField(null=True, verbose_name='Number of 1HP')),
                ('split_2', models.IntegerField(null=True, verbose_name='Number of 1.5HP')),
                ('split_3', models.IntegerField(null=True, verbose_name='Number of 2HP')),
                ('split_4', models.IntegerField(null=True, verbose_name='Number of 2.5HP')),
                ('standing_unit_1', models.IntegerField(null=True, verbose_name='Number of 3HP')),
                ('standing_unit_2', models.IntegerField(null=True, verbose_name='Number of 5HP')),
                ('standing_unit_3', models.IntegerField(null=True, verbose_name='Number of 10HP')),
                ('comment', models.TextField(null=True, verbose_name='Comment')),
                ('rooftop', models.BooleanField(default=False, null=True)),
                ('ground_mounted', models.BooleanField(default=False, null=True)),
                ('rooftop_ground_mounted', models.BooleanField(default=False, null=True)),
                ('florescent', models.CharField(blank=True, max_length=50, null=True)),
                ('LED', models.CharField(blank=True, max_length=50, null=True)),
                ('halogen', models.CharField(blank=True, max_length=50, null=True)),
                ('energy_saver', models.CharField(blank=True, max_length=50, null=True)),
                ('panel_light', models.CharField(blank=True, max_length=50, null=True)),
                ('others', models.CharField(blank=True, help_text='Please state the power rating in Watts.', max_length=50, null=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.client')),
            ],
            options={
                'verbose_name': 'PageOne',
                'verbose_name_plural': 'PageOnes',
            },
        ),
        migrations.CreateModel(
            name='FillingStationPageOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_full_address', models.CharField(blank=True, max_length=120, null=True)),
                ('gps_coordinate', models.CharField(blank=True, max_length=30, null=True, verbose_name='GPS Coordinates')),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('date', models.DateTimeField()),
                ('PMS_pump', models.IntegerField(blank=True, null=True)),
                ('AGO_pump', models.IntegerField(blank=True, null=True)),
                ('DPK_pump', models.IntegerField(blank=True, null=True)),
                ('surface_transfer_pump', models.IntegerField(blank=True, help_text='1.5HP', null=True)),
                ('water_pump', models.IntegerField(blank=True, null=True)),
                ('location', models.TextField(help_text='Please enter the number of ACs by location, stating the codition as: working or not working.', null=True, verbose_name='ACs by Location')),
                ('split_1', models.IntegerField(null=True, verbose_name='Number of 1HP')),
                ('split_2', models.IntegerField(null=True, verbose_name='Number of 1.5HP')),
                ('split_3', models.IntegerField(null=True, verbose_name='Number of 2HP')),
                ('split_4', models.IntegerField(null=True, verbose_name='Number of 2.5HP')),
                ('standing_unit_1', models.IntegerField(null=True, verbose_name='Number of 3HP')),
                ('standing_unit_2', models.IntegerField(null=True, verbose_name='Number of 5HP')),
                ('standing_unit_3', models.IntegerField(null=True, verbose_name='Number of 10HP')),
                ('lighting_details', models.CharField(blank=True, help_text='Please state the type and wattage rating of all bulbs.', max_length=200, null=True)),
                ('canopy_light', models.IntegerField(blank=True, null=True)),
                ('perimeter_light', models.IntegerField(blank=True, null=True)),
                ('offices', models.IntegerField(blank=True, null=True)),
                ('rest_rooms', models.IntegerField(blank=True, null=True)),
                ('others_1', models.IntegerField(blank=True, null=True)),
                ('others_2', models.IntegerField(blank=True, null=True)),
                ('generator_1', models.IntegerField(blank=True, null=True)),
                ('generator_2', models.IntegerField(blank=True, null=True)),
                ('connects_to_grid', models.BooleanField(null=True)),
                ('transformer_size', models.IntegerField(blank=True, help_text='in kVA', null=True)),
                ('fridge', models.IntegerField(blank=True, null=True)),
                ('freezer', models.IntegerField(blank=True, null=True)),
                ('fan', models.IntegerField(blank=True, null=True)),
                ('printer', models.IntegerField(blank=True, null=True)),
                ('scanner', models.IntegerField(blank=True, null=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.client')),
            ],
        ),
        migrations.CreateModel(
            name='CommercialIndustryPageOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_full_address', models.CharField(blank=True, max_length=120, null=True)),
                ('gps_coordinate', models.CharField(blank=True, max_length=30, null=True, verbose_name='GPS Coordinates')),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True)),
                ('date', models.DateTimeField()),
                ('connects_to_grid', models.BooleanField(blank=True, null=True)),
                ('tariff', models.DecimalField(blank=True, decimal_places=4, help_text='per kWh', max_digits=8, null=True)),
                ('grid_quality', models.CharField(blank=True, max_length=80, null=True)),
                ('grid_availability', models.IntegerField(blank=True, help_text='State in percentage on the average.', null=True)),
                ('transformers_detail', models.CharField(blank=True, help_text='in kVA', max_length=200, null=True)),
                ('generators_detail', models.CharField(blank=True, help_text='in kVA', max_length=200, null=True)),
                ('switching_mode', models.CharField(blank=True, max_length=30, null=True)),
                ('minimum_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('average_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('maximum_load', models.IntegerField(blank=True, help_text='kW', null=True)),
                ('daily_consumption', models.IntegerField(blank=True, help_text='kWh', null=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='audits.client')),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistForFillingStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_one', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.fillingstationpageone', verbose_name='Pumps | Cooling and Lighting Information')),
                ('page_two', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.fillingstationpagetwo', verbose_name='Appliances | Roof Detail and Operation Hour Information')),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistForCandI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_one', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.commercialindustrypageone', verbose_name='Client Detail | Existing Power and Load Information')),
                ('page_two', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.commercialindustrypagetwo', verbose_name='Mounting Planes | Equipment Room | Solution Type')),
            ],
        ),
        migrations.CreateModel(
            name='ChecklistForBank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_five', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pagefive', verbose_name='Safety')),
                ('page_four', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pagefour', verbose_name='Operation Hours | Building | ER Information')),
                ('page_one', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pageone', verbose_name='Customer Information | Cooling | Roof and Lightings')),
                ('page_seven', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pageseven', verbose_name='Signoff | General Comments')),
                ('page_six', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pagesix', verbose_name='Roof Information')),
                ('page_three', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pagethree', verbose_name='Existing Power Information')),
                ('page_two', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='audits.pagetwo', verbose_name='Appliances')),
            ],
        ),
    ]
